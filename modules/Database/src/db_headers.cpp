//
// Created by perry on 11/9/22.
//

#include <iostream>
#include <utility>
#include "db_headers.h"

///As of right now everything everything realted to the "row" classes is autogenerated. Assuming we don't later inherit from them it should stay that way.

user_row::user_row(int mUserId, std::string mUsername, std::string mPassword, std::string mRegion)
        : m_user_id(mUserId), m_username(std::move(mUsername)), m_password(std::move(mPassword)), m_region(std::move(mRegion)) {}

user_row::user_row() {
    m_user_id = -1;
}

bool user_row::operator==(const user_row &rhs) const {
    return m_user_id == rhs.m_user_id;
}

bool user_row::operator!=(const user_row &rhs) const {
    return !(rhs == *this);
}

watchlist_row::watchlist_row(int mUserId, int mMovieId, double mRating, std::string mDateModified) : m_user_id(
        mUserId), m_movie_id(mMovieId), m_rating(mRating), m_date_modified(std::move(mDateModified)) {}

watchlist_row::watchlist_row() {

}

bool watchlist_row::operator==(const watchlist_row &rhs) const {
    return m_user_id == rhs.m_user_id &&
           m_movie_id == rhs.m_movie_id;
}

bool watchlist_row::operator!=(const watchlist_row &rhs) const {
    return !(rhs == *this);
}

community_tag_row::community_tag_row(int mUserId, int mMovieId, std::string mTag, std::string mTimestamp)
        : m_user_id(mUserId), m_movie_id(mMovieId), m_tag(std::move(mTag)), m_timestamp(std::move(mTimestamp)) {}

community_tag_row::community_tag_row() {

}

bool community_tag_row::operator==(const community_tag_row &rhs) const {
    return m_user_id == rhs.m_user_id &&
           m_movie_id == rhs.m_movie_id &&
           m_tag == rhs.m_tag;
}

bool community_tag_row::operator!=(const community_tag_row &rhs) const {
    return !(rhs == *this);
}

user_rating_row::user_rating_row(int mUserId, int mMovieId, double mRating, std::string mTimestamp)
        : m_user_id(mUserId), m_movie_id(mMovieId), m_rating(mRating), m_timestamp(std::move(mTimestamp)) {}

user_rating_row::user_rating_row() {

}

bool user_rating_row::operator==(const user_rating_row &rhs) const {
    return m_user_id == rhs.m_user_id &&
           m_movie_id == rhs.m_movie_id;
}

bool user_rating_row::operator!=(const user_rating_row &rhs) const {
    return !(rhs == *this);
}

movie_row::movie_row(int mMovieId, std::string mTitle, std::string mGenres) : m_movie_id(mMovieId),
                                                                                            m_title(std::move(mTitle)),
                                                                                            m_genres(std::move(mGenres)) {}

movie_row::movie_row() {

}

bool movie_row::operator==(const movie_row &rhs) const {
    return m_movie_id == rhs.m_movie_id;
}

bool movie_row::operator!=(const movie_row &rhs) const {
    return !(rhs == *this);
}

link_row::link_row(int mMovieId, int mImbdId, int mTmdbId) : m_movie_id(mMovieId), m_imbd_id(mImbdId),
                                                             m_tmdb_id(mTmdbId) {}

link_row::link_row() {

}

bool link_row::operator==(const link_row &rhs) const {
    return m_movie_id == rhs.m_movie_id;
}

bool link_row::operator!=(const link_row &rhs) const {
    return !(rhs == *this);
}

genome_tag_row::genome_tag_row(int mTagId, std::string mTag) : m_tag_id(mTagId), m_tag(std::move(mTag)) {}


genome_tag_row::genome_tag_row() {
}

bool genome_tag_row::operator==(const genome_tag_row &rhs) const {
    return m_tag_id == rhs.m_tag_id;
}

bool genome_tag_row::operator!=(const genome_tag_row &rhs) const {
    return !(rhs == *this);
}

genome_scores_row::genome_scores_row(int mMovieId, int mTagId, double mRelevance) : m_movie_id(mMovieId),
                                                                                    m_tag_id(mTagId),
                                                                                    m_relevance(mRelevance) {}

genome_scores_row::genome_scores_row() {

}

bool genome_scores_row::operator==(const genome_scores_row &rhs) const {
    return m_movie_id == rhs.m_movie_id &&
           m_tag_id == rhs.m_tag_id;
}

bool genome_scores_row::operator!=(const genome_scores_row &rhs) const {
    return !(rhs == *this);
}

user_scores_row::user_scores_row(int mUserId, int mTagId, double mRelevance) : m_user_id(mUserId),
                                                                               m_tag_id(mTagId),
                                                                               m_relevance(mRelevance) {

}

user_scores_row::user_scores_row() {

}

bool user_scores_row::operator==(const user_scores_row &rhs) const {
    return m_user_id == rhs.m_user_id &&
           m_tag_id == rhs.m_tag_id;
}

bool user_scores_row::operator!=(const user_scores_row &rhs) const {
    return !(rhs == *this);
}
